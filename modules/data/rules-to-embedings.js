
// âœ… rules-to-embeddings.js
import fs from 'fs';
import OpenAI from 'openai';

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const rules = [
  {
    categoria: "objeÃ§Ãµes",
    condicao: "cliente menciona preÃ§o alto",
    acao: "responder com empatia e reforÃ§ar o valor e durabilidade do serviÃ§o"
  },
  {
    categoria: "urgencia",
    condicao: "cliente menciona pressa ou urgÃªncia",
    acao: "responder com prioridade e sugerir marcaÃ§Ã£o imediata"
  },
  {
    categoria: "upsell",
    condicao: "cliente recebe orÃ§amento elevado",
    acao: "sugerir oferta extra (ex: carro de substituiÃ§Ã£o gratuito)",
    exemplo: "ðŸ’¡ Oferta: carro de substituiÃ§Ã£o incluÃ­do para orÃ§amentos acima de 300â‚¬!"
  }
];

async function gerarEmbeddings() {
  const regrasComEmbedding = [];

  for (const regra of rules) {
    const input = `${regra.categoria} - ${regra.condicao} - ${regra.acao}`;
    const response = await openai.embeddings.create({
      model: 'text-embedding-ada-002',
      input
    });

    regrasComEmbedding.push({
      ...regra,
      embedding: response.data[0].embedding
    });
  }

  fs.writeFileSync(
    './modules/data/rules-embeddings.mjs',
    `export const regras = ${JSON.stringify(regrasComEmbedding, null, 2)};`
  );

  console.log('âœ… Ficheiro com embeddings atualizado.');
}

gerarEmbeddings().catch(err => console.error('Erro:', err));
